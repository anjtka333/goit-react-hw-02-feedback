{"version":3,"sources":["components/Statistics/Statistics.jsx","components/Section/Section.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Notification/Notification.jsx","App.js","index.js"],"names":["Statistics","good","neutral","bad","total","positivePercentage","Section","title","children","FeedbackOptions","options","onLeaveFeedback","Object","entries","map","item","id","onClick","name","Notification","message","App","state","handleIncrement","target","setState","prevState","this","Math","round","countTotalFeedback","countPositiveFeedbackPercentage","Component","defaultProps","initialValue","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAceA,EAdI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,mCACE,+BACE,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,2CAAcC,EAAd,aCAOC,EARC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,oCACE,6BAAKD,IACJC,MCKQC,EATS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAMlC,OALmBC,OAAOC,QAAQH,GAASI,KAAI,SAACC,EAAMC,GAAP,OAC7C,wBAAiBC,QAASN,EAAiBO,KAAMH,EAAK,GAAtD,SACGA,EAAK,IADKC,OCEFG,EAJM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,4BAAIA,KCIPC,E,4MAMJC,MAAQ,CACNrB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPoB,gBAAkB,YAAiB,IAAdC,EAAa,EAAbA,OACnB,EAAKC,UAAS,SAACC,GACb,IAAQR,EAASM,EAATN,KACR,OAAO,eAAGA,EAAOQ,EAAUR,GAAQ,O,wDAIvC,WAEE,OADcS,KAAKL,MAAMrB,KAAO0B,KAAKL,MAAMpB,QAAUyB,KAAKL,MAAMnB,M,6CAIlE,WAIE,OAHiByB,KAAKC,MACnBF,KAAKL,MAAMrB,KAAO0B,KAAKG,qBAAwB,O,oBAKpD,WACE,MAA+BH,KAAKL,MAA5BrB,EAAR,EAAQA,KAAME,EAAd,EAAcA,IAAKD,EAAnB,EAAmBA,QACnB,OACE,qCACE,cAAC,EAAD,CAASK,MAAM,wBAAf,SACE,cAAC,EAAD,CACEG,QAASiB,KAAKL,MACdX,gBAAiBgB,KAAKJ,oBAG1B,eAAC,EAAD,CAAShB,MAAM,aAAf,UACiC,IAA9BoB,KAAKG,sBACJ,cAAC,EAAD,CACE7B,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOuB,KAAKG,qBACZzB,mBAAoBsB,KAAKI,oCAGE,IAA9BJ,KAAKG,sBACJ,cAAC,EAAD,CAAcV,QAAQ,gC,GApDhBY,aAAZX,EAEGY,aAAe,CACpBC,aAAc,GAyDHb,QC5Dfc,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.28e8869e.chunk.js","sourcesContent":["const Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\r\n  return (\r\n    <>\r\n      <ul>\r\n        <li>Good {good}</li>\r\n        <li>Neutral {neutral}</li>\r\n        <li>Bad {bad}</li>\r\n        <li>Total {total}</li>\r\n        <li>Positive {positivePercentage}%</li>\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Statistics;\r\n","const Section = ({ title, children }) => {\r\n  return (\r\n    <section>\r\n      <h1>{title}</h1>\r\n      {children}\r\n    </section>\r\n  );\r\n};\r\nexport default Section;\r\n","const FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n  const buttonName = Object.entries(options).map((item, id) => (\r\n    <button key={id} onClick={onLeaveFeedback} name={item[0]}>\r\n      {item[0]}\r\n    </button>\r\n  ));\r\n  return buttonName;\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","const Notification = ({ message }) => {\r\n  return <p>{message}</p>;\r\n};\r\n\r\nexport default Notification;\r\n","import { Component } from \"react\";\nimport Statistics from \"./components/Statistics/Statistics\";\nimport Section from \"./components/Section/Section\";\nimport FeedbackOptions from \"./components/FeedbackOptions/FeedbackOptions\";\nimport Notification from \"./components/Notification/Notification\";\nclass App extends Component {\n  // static propTypes = {};\n  static defaultProps = {\n    initialValue: 0,\n  }; //навіщо прописувати, якщо не можна писати в state\n\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleIncrement = ({ target }) => {\n    this.setState((prevState) => {\n      const { name } = target;\n      return { [name]: prevState[name] + 1 };\n    });\n  };\n\n  countTotalFeedback() {\n    const total = this.state.good + this.state.neutral + this.state.bad;\n    return total;\n  }\n\n  countPositiveFeedbackPercentage() {\n    const positive = Math.round(\n      (this.state.good / this.countTotalFeedback()) * 100\n    );\n    return positive;\n  }\n\n  render() {\n    const { good, bad, neutral } = this.state;\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={this.state}\n            onLeaveFeedback={this.handleIncrement}\n          />\n        </Section>\n        <Section title=\"Statistics\">\n          {this.countTotalFeedback() !== 0 && (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          )}\n          {this.countTotalFeedback() === 0 && (\n            <Notification message=\"No feedback given\" />\n          )}\n        </Section>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}